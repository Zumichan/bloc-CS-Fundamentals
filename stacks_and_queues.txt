#### Exercises

1. What is the main difference between a stack and a queue?

A) Stack uses LIFO (Last in First out) data structure while Queue uses FIFO (First in First out) data structure.

2. What are the similarities between stacks and queues?

A) Both are data structures where elements are stored (put in) and removed (taken out). Also user is not allowed to pick items from the middle of the queue or the stack since no indexes are available.

3. Imagine you are an engineer tasked with implementing the UNDO and REDO options in a word processor such as Microsoft Word. Which data structure would you use for each option and why?

A) I will use stack for each option because I want to undo or redo the last action which would be on top of the stack.

#### Programming Questions

1. Given a string, reverse it using a stack. For example, the string "Bloc!" should be converted to "!colB".

```
//Using a stack
function reverseWord(word) {  
  let stack = [];
  for (let i = 0; i < word.length; i++) {
    stack.push(word[i]);
  }
  
  let reversedWord = '';
  while (stack.length > 0) {
    reversedWord += stack.pop();
  }
  return reversedWord;
}

console.log(reverseWord('Bloc!')); 

```
//Using methods
function reverseWord(word){
  return word.split('').reverse().join('');
}
```

2. Implement the pop method of a stack using one queue. Make a FIFO data structure mirror the functionality of a LIFO data structure. Since the internal list is not the same as defined in the checkpoint, it may help to rewrite the pseudocode first.
To delete an item, take all of the elements in the queue one at a time and put them at the end of the queue, except for the last one which should be removed and returned.

FUNCTION pop
  SET new array newQueue
  SET new array removedElement
  IF the index is not equal to the last index THEN
    STORE the value in newQueue
  ELSE
    STORE the value in removedElement
  RETURN removedElement
END FUNCTION

```
function pop(queue){
  let newQueue=[];
  let removedElement=[];
  for (let i=0; i<queue.length;i++){
    if(i!==queue.length-1){
      newQueue.push(queue[i]);
    }else{
      removedElement.push(queue[i]);
    }
  }
return removedElement;
}

console.log(pop([1,2,3,4,5]));
```

3. Implement the enqueue and dequeue methods defined in the checkpoint inside your own Queue class.

```
class Queue {
  constructor(){
    this.list=[];
  }

  enqueue(element){
    this.list.push(element);
  }

  dequeue(){
    return this.list.shift();
  }
}

const queue=new Queue();
queue.enqueue(1)
queue.enqueue(2)
queue.enqueue(3)
queue.enqueue(4)
queue.enqueue(5)
console.log(queue.dequeue())
console.log(queue.dequeue())
console.log(queue.dequeue())
```

